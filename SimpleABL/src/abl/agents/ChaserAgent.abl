package abl.generated;
// the package corresponds to where generated Java files are placed.

import abl.wmes.*;
import abl.actions.*;
import abl.sensors.*;
// Imports are used the same way as in Java. Its necessary to import Sensor, Action, and WME classes.
/** 
 * A simple agent that moves towards the player and occassionally fires bullets.
 *
 * @author Josh McCoy 1-23-2019
 * @author Ben Weber 3-7-11
 */ 
behaving_entity ChaserAgent {
// This defines a name for the agent 

	/** 
	 * Define the physicals actions that the agent can perform. The definition includes an action prototype and
	 * and an action class name. The class name must be a Java class which has been imported. 
	 *
	 * The prototype parameters correspond to the types expected by the execute(object[]) method 
	 * in the action's Java class.
	 */
	register act moveUp(int) with MoveUp;
	register act moveDown(int) with MoveDown; 
	register act moveLeft(int) with MoveLeft;
	register act moveRight(int) with MoveRight;
	register act stop(int) with Stop;
	register act fire(int, int, int, int) with Fire;
	register act resetGun(int, boolean) with ResetGun;
	register act resetMovers(int, boolean) with ResetMovers;
	
	/* added move action starter1 */
	register act move(int, int, int, int) with MoveTo;
	
	/* added SetColor action starter3 */
	register act SetColor(int, int, int, int) with SetColor;
	
	/* added create new bot action intermediate1 */
	register act NewBot() with MakeBot;

	/**
	 * Define the sensors that add game state to working memory. Each sensor defines the name of the WME class
	 * that it is responsible for managing and the Java sensor class that implements the functionality. 
	 */
    register wme PlayerWME with PlayerSensor;
    register wme BotWME with BotSensor;

	/**
	 * Defines a variable scope to the agent, which can be used and modified in behaviors. 
	 *
	 * It is also possible to use constants from a Java interface (e.g.):
     * constants game.Constants;   
	 */ 
	int botSpeed = 2;	

	/**
	 * After an initial delay, continuously fire bullets. 
	 */
	sequential behavior manageFiring() {
		subgoal Wait(2000);					// this suspends the execution of the behavior
		with (persistent) subgoal fire();
	}

    /**
     * Fires a bullet at the player character using the bot position at the source and the player position as the target
     *
     * Each fire action is followed by a cooldown period. 
     */
	sequential behavior fire() {
		precondition {
			(PlayerWME locationX::playerX locationY::playerY)	// locationX invokes PlayerMWE.getLocationX() 
			(BotWME id::id locationX::botX locationY::botY hasFired::hasFired isFiring::isFiring)   // :: is used to bind properties to behavior scoped variables
			(isFiring==true)
			(hasFired==false)
		}
		specificity 2;

		act resetGun(id, true);

		//act SetColor(255,0,0,id);
		subgoal Wait(5);
		act fire(botX, botY, playerX, playerY);	
		//act SetColor(125,0,0,id);
	}
	
	/* separated cooldown */
	parallel behavior fire() {
		precondition {
			(PlayerWME locationX::playerX locationY::playerY)	// locationX invokes PlayerMWE.getLocationX() 
			(BotWME id::id locationX::botX locationY::botY hasFired::hasFired)   // :: is used to bind properties to behavior scoped variables
			(hasFired==true)
		}
		specificity 1;

		subgoal Wait(500);
		act resetGun(id, false); // reset all guns
	}
	
	sequential behavior fire() {
		precondition {
			(BotWME id::id locationX::botX locationY::botY isFiring::isFiring)   // :: is used to bind properties to behavior scoped variables
			(isFiring==false)
		}
		specificity 0;		
				
		subgoal Wait(500);
	}

	/**
	 * Continuously move towards the player character.
	 */
	sequential behavior manageMovement() {
		with (persistent) subgoal MoveTo(100, 100);
		// with (persistent) subgoal move();
	}

	/**
	 * Moves the bot up if the player is above the bot.
	 * 
	 * Note: The agent prefers vertical over horizonal movement, because the move up and move down behaviors have 
	 * a higher specificity than the other move behaviors. Therefore, if the agent needs to be moved up or down,
	 * they are chosen first. 
	 */ 
	sequential behavior move() {
		precondition {
			(PlayerWME locationX::playerX locationY::playerY)
			(BotWME id::id locationX::botX locationY::botY trajectoryY::trajectoryY)
			(botY > (playerY + botSpeed))
			(trajectoryY>=0)  // only consider going up if we are not moving up
		}
		specificity 3;
		mental_act {
			if(id == 1){
				System.out.println("moving up" + id);
			}
		}
 
		act moveUp(id);
		succeed_step;
	}
 	
	/**
	 * Moves the bot down if the player is below the bot.
	 */
	sequential behavior move() {
		precondition {
			(PlayerWME locationX::playerX locationY::playerY)
			(BotWME id::id locationX::botX locationY::botY trajectoryY::trajectoryY) 
			(botY < (playerY - botSpeed))
			(trajectoryY<=0)  // only consider going down if we are not moving down
		}
		specificity 3;
		mental_act {
			if(id == 1){
				System.out.println("moving down"  + id);
			}
		}
    	
		act moveDown(id);
		succeed_step;
	}
 	 
	/**
	 * Moves the bot left if the player to the left of the bot.
	 */
	sequential behavior move() {
		precondition {
			(PlayerWME locationX::playerX locationY::playerY)
			(BotWME id::id locationX::botX locationY::botY trajectoryX::trajectoryX) 
			(botX > (playerX + botSpeed))
			(botY >= (playerY - botSpeed)) // no need to move vertical
			(botY <= (playerY + botSpeed)) // no need to move vertical
			(trajectoryX>=0) // only consider going left if we are not moving left
		}
		specificity 2;
		mental_act {
			if(id == 1){
				System.out.println("moving left"  + id);
			}
		}

		act moveLeft(id);
		succeed_step;
	}

	/**
	 * Moves the bot right if the player to the right of the bot.
	 */
	sequential behavior move() {
		precondition { 
			(PlayerWME locationX::playerX locationY::playerY)
			(BotWME id::id locationX::botX locationY::botY trajectoryX::trajectoryX) 
			(botX < (playerX - botSpeed))
			(botY >= (playerY - botSpeed)) // no need to move vertical
			(botY <= (playerY + botSpeed)) // no need to move vertical
			(trajectoryX<=0) // only consider moving right if we are not moving right
		}
		specificity 2;
		mental_act {
			if(id == 1){
				System.out.println("moving right"  + id);
			}
		}

		act moveRight(id);
		succeed_step;
	}
	
	/**
	 * Stops the bot.
	 *
	 * Of the move behaviors, this is always evaluated last due to having the lowest specificity. 
	 * Since it is evaluated last, it is only reached if none of the other behaviors can be activited,
	 * which means the player and bot are overlapping. This is why there are no preconditions. 
	 */
	sequential behavior move() {
		precondition {
			(PlayerWME locationX::playerX locationY::playerY)
			(BotWME id::id locationX::botX locationY::botY) 
			(botY >= (playerY - botSpeed)) // no need to move vertical
			(botY <= (playerY + botSpeed)) // no need to move vertical
			(botX >= (playerX - botSpeed)) // no need to move horizontal
			(botX <= (playerX + botSpeed)) // no need to move horizontal
		}
		specificity 1;
		mental_act {
			if(id == 1){
				System.out.println("stopping:" + id);
			}
		}
		
		act stop(id);
		succeed_step;
	}

	/* if there are no changes in moves to be made */
	sequential behavior move() {
		specificity 0;
		succeed_step;
	}

    /**
     * Utility behavior for suspending the execution of a behavior.
     *
     * This behavior consist of two steps. First, the mental act compute the finishing time
     * based on the input delay. Second, the success tests waits until the condition check
     * evaluates to true.
     */
	sequential behavior Wait(int milliseconds) {
		precondition {
			(BotWME id::id)
		}

		long finish;
	    mental_act { 
	    	finish = System.currentTimeMillis() + milliseconds; 
	    }
	    
	    with ( success_test { (System.currentTimeMillis() > finish) } ) wait;
	}
	
	/**
	 * Moves the bot to the given location
	 */
	sequential behavior MoveTo(int x, int y) {
		precondition {
			(PlayerWME locationX::playerX locationY::playerY)
			(BotWME id::id hasMoved::hasMoved)
			(hasMoved==false)
		}
		specificity 3;
				
		act resetMovers(id, true); // set this id as needing to be reset
		act move(playerX, playerY, 50, id);
	}
	
	/* reset movers */
	sequential behavior MoveTo(int x, int y){
		precondition {
			(BotWME id::id hasMoved::hasMoved)
		}
		specificity 0;
		
		act resetMovers(id, false); // reset all movers
	}
	
	
	
	sequential behavior AddBot() {
		mental_act {
			System.out.println("Adding bot!");
		}
	
		act NewBot();
	}
	
 
    /** 
     * Root of the active behavior tree.
     *
     * Note: this is a parallel behavior.
     * Note: the ABL compiler expects this to be the last behavior defined in the agent. 
     * Note: priorities are used to ensure all goals are pursued, since the move() goal can thrash in this simple example
     */
    initial_tree {
    	with (priority 10) mental_act {
			System.out.println("Starting bot Agent");
    	}

		sequential{
			subgoal AddBot();
			subgoal AddBot();
			subgoal AddBot();
	
			parallel{
				with (priority 1, persistent) subgoal manageMovement();
				with (priority 2, persistent) subgoal manageFiring();
			}
		}

    }
}
